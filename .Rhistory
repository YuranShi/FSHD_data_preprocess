getGPL = FALSE)
## Download platform data from GEO and get sample (phenotype) information ##
GPL = "GPL16791"
data.platform = getGEO(GPL)
data.index = match(GPL, sapply(data.series, annotation))
data.p = pData(data.series[[data.index]])
data.expr = exprs(data.series[[data.index]])
common = intersect(colnames(data.expr), rownames(data.p))
m1 = match(common, colnames(data.expr))
m2 = match(common, rownames(data.p))
data.expr = data.expr[, m1]
data.p = data.p[m2, ]
View(data.p)
# Get the expression data
expression_df <- read.csv(file = sprintf("data/%s/%s.csv", GSE, GSE), row.names = 1)
View(expression_df)
# Get the expression data
expression_df <- read.csv(file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE), row.names = 1)
View(expression_df)
title <- substr(data.p[,1], 4, 7)
columns <- colnames(expression_df) # use when processing raw counts
columns <- substr(columns, 5, 8)
idx <- match(columns, title)
title
columns
reordered_sample <- data.p[,2][idx]
expression_df <- setNames(expression_df, reordered_sample)
View(expression_df)
# Get the expression data
expression_df <- read.csv(file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE), row.names = 1)
View(expression_df)
if (GSE == "GSE115650" || GSE == "GSE140261") {
title <- substr(data.p[,1], 4, 7)
columns <- colnames(expression_df) # use when processing raw counts
# columns <- colnames(expression_df)[3:length(colnames(expression_df))]
columns <- substr(columns, 5, 8)
} else if (GSE == "GSE56787"){
title <- data.p[,1]
title <- sapply(strsplit(title,"_"), `[`, 1) # split based on "_" and take the first element
columns <- colnames(expression_df)[3:length(colnames(expression_df))]
}
idx <- match(columns, title)
reordered_sample <- data.p[,2][idx]
expression_df <- setNames(expression_df, reordered_sample)
View(expression_df)
# expression_df <- setNames(expression_df, c("Gene_Symbol", "Ensembl_Gene_ID", reordered_sample))
write.csv(
expression_df,
file = sprintf("data_GSM/%s_normalized_from_raw.csv", GSE),
quote = F
)
## Download series data from GEO ##
GSE = "GSE115650"
data.series = getGEO(GEO = GSE,
AnnotGPL = FALSE,
getGPL = FALSE)
## Download platform data from GEO and get sample (phenotype) information ##
GPL = "GPL16791"
data.platform = getGEO(GPL)
data.index = match(GPL, sapply(data.series, annotation))
data.p = pData(data.series[[data.index]])
data.expr = exprs(data.series[[data.index]])
common = intersect(colnames(data.expr), rownames(data.p))
m1 = match(common, colnames(data.expr))
m2 = match(common, rownames(data.p))
data.expr = data.expr[, m1]
data.p = data.p[m2, ]
# Get the expression data
expression_df <- read.csv(file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE), row.names = 1)
View(expression_df)
if (GSE == "GSE115650" || GSE == "GSE140261") {
title <- substr(data.p[,1], 4, 7)
columns <- colnames(expression_df) # use when processing raw counts
# columns <- colnames(expression_df)[3:length(colnames(expression_df))]
columns <- substr(columns, 5, 8)
} else if (GSE == "GSE56787"){
title <- data.p[,1]
title <- sapply(strsplit(title,"_"), `[`, 1) # split based on "_" and take the first element
columns <- colnames(expression_df)[3:length(colnames(expression_df))]
}
idx <- match(columns, title)
reordered_sample <- data.p[,2][idx]
expression_df <- setNames(expression_df, reordered_sample)
View(expression_df)
# expression_df <- setNames(expression_df, c("Gene_Symbol", "Ensembl_Gene_ID", reordered_sample))
write.csv(
expression_df,
file = sprintf("data_GSM/%s_normalized_from_raw.csv", GSE),
quote = F
)
GSE = "GSE140261"
## Read data and metadata into dataframe
data <-
read.csv(
file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE),
header = T,
row.names = 1
)
meta <- read.csv(file = sprintf("meta/%s_meta.csv", GSE),
header = T,
row.names = 1)
### Check classes of the data we just brought in
class(data)
class(meta)
View(data)
View(meta)
### Check that sample names match in both files
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
## Create DESeq2Dataset object
dds <-
DESeqDataSetFromMatrix(countData = data,
colData = meta,
design = ~ sampletype)
View(counts(dds))
View(data)
## Generate the normalized counts
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
normalized_counts <- counts(dds, normalized = TRUE)
write.csv(
normalized_counts,
file = sprintf("data/%s/%s_normalized_from_raw.csv", GSE, GSE),
sep = "\t",
quote = F,
col.names = NA
)
write.csv(
normalized_counts,
file = sprintf("data/%s/%s_normalized_from_raw.csv", GSE, GSE),
col.names = NA
)
new_normalized <-
read.csv(
file = sprintf("data/%s/%s_normalzied_from_raw.csv", GSE, GSE),
header = T,
row.names = 1
)
new_normalized <-
read.csv(
file = sprintf("data/%s/%s_normalized_from_raw.csv", GSE, GSE),
header = T,
row.names = 1
)
View(new_normalized)
normalized <-
+     read.csv(
+         file = sprintf("data/%s/%s_normalized.csv", GSE, GSE),
+         header = T,
+         row.names = 1
+     )
> View(new_normalized)
n <-
read.csv(
file = sprintf("data/%s/%s_normalized.csv", GSE, GSE),
header = T,
row.names = 1
)
View(n)
GSE = "GSE115650"
## Read data and metadata into dataframe
data <-
read.csv(
file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE),
header = T,
row.names = 1
)
meta <- read.csv(file = sprintf("meta/%s_meta.csv", GSE),
header = T,
row.names = 1)
### Check classes of the data we just brought in
class(data)
class(meta)
View(data)
View(meta)
### Check that sample names match in both files
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
source("C:/Users/mshi/OneDrive - Dyne Therapeutics Inc/Data/FSHD_DataPreprocess/normalization.R", echo=TRUE)
all(colnames(data) == rownames(meta))
# Match meta and data orders if needed
if (all(colnames(data) == rownames(meta)) == F) {
idx <- match(colnames(data), rownames(meta))
meta <- meta[idx, ]
}
View(meta)
View(meta)
class(meta)
## Read data and metadata into dataframe
data <-
read.csv(
file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE),
header = T,
row.names = 1
)
meta <- read.csv(file = sprintf("meta/%s_meta.csv", GSE),
header = T,
row.names = 1)
### Check classes of the data we just brought in
class(data)
class(meta)
View(data)
View(meta)
### Check that sample names match in both files
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
# Match meta and data orders if needed
if (all(colnames(data) == rownames(meta)) == F) {
# idx <- match(colnames(data), rownames(meta))
# meta <- meta[idx, ]
idx <- match(rownames(meta), colnames(data))
data <- data[,idx]
}
View(data)
## Create DESeq2Dataset object
dds <-
DESeqDataSetFromMatrix(countData = data,
colData = meta,
design = ~ sampletype)
View(counts(dds))
## Generate the normalized counts
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
normalized_counts <- counts(dds, normalized = TRUE)
View(normalized_counts)
write.csv(
normalized_counts,
file = sprintf("data/%s/%s_normalized_from_raw.csv", GSE, GSE),
col.names = NA
)
normalized <-
read.csv(
file = sprintf("data/%s/%s_normalized.csv", GSE, GSE),
header = T,
row.names = 1
)
View(normalized)
GSE = "GSE115650"
## Read data and metadata into dataframe
data <-
read.csv(
file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE),
header = T,
row.names = 1
)
meta <- read.csv(file = sprintf("meta/%s_meta.csv", GSE),
header = T,
row.names = 1)
### Check classes of the data we just brought in
class(data)
class(meta)
View(data)
View(meta)
### Check that sample names match in both files
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
# Match meta and data orders if needed
if (all(colnames(data) == rownames(meta)) == F) {
idx <- match(colnames(data), rownames(meta))
meta <- meta[idx, ]
}
idx
meta
meta <- read.csv(file = sprintf("meta/%s_meta.csv", GSE),
header = T,
row.names = 1)
meta[idx , ]
idx <- as.numeric(idx)
idx
meta[idx , ]
d$index <- index
d$index <- idx
meta$index <- idx
meta[meta$index, ]
meta[order(meta$index), ]
GSE = "GSE115650"
## Read data and metadata into dataframe
data <-
read.csv(
file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE),
header = T,
row.names = 1
)
meta <- read.csv(file = sprintf("meta/%s_meta.csv", GSE),
header = T,
row.names = 1)
### Check classes of the data we just brought in
class(data)
class(meta)
View(data)
View(meta)
### Check that sample names match in both files
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
# Match meta and data orders if needed
if (all(colnames(data) == rownames(meta)) == F) {
idx <- match(colnames(data), rownames(meta))
meta$index <- idx
meta <- meta[meta$index, ]
}
all(colnames(data) == rownames(meta))
## Create DESeq2Dataset object
dds <-
DESeqDataSetFromMatrix(countData = data,
colData = meta,
design = ~ sampletype)
View(counts(dds))
View(data)
## Generate the normalized counts
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
normalized_counts <- counts(dds, normalized = TRUE)
View(normalized_counts)
write.csv(
normalized_counts,
file = sprintf("data/%s/%s_normalized_from_raw.csv", GSE, GSE),
col.names = NA
)
n <-
read.csv(
file = sprintf("data/%s/%s_normalized.csv", GSE, GSE),
header = T,
row.names = 1
)
View(n)
library(DESeq2)
GSE = "GSE56787"
## Read data and metadata into dataframe
data <-
read.csv(
file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE),
header = T,
row.names = 1
)
meta <- read.csv(file = sprintf("meta/%s_meta.csv", GSE),
header = T,
row.names = 1)
### Check classes of the data we just brought in
class(data)
class(meta)
View(data)
View(meta)
### Check that sample names match in both files
all(colnames(data) %in% rownames(meta))
all(colnames(data) == rownames(meta))
colnames(data)
length(colnames(data))
length(rownames(meta))
library(GEOquery)
## Download series data from GEO ##
GSE = "GSE56787"
data.series = getGEO(GEO = GSE,
AnnotGPL = FALSE,
getGPL = FALSE)
## Download platform data from GEO and get sample (phenotype) information ##
GPL = "GPL16791"
data.platform = getGEO(GPL)
data.index = match(GPL, sapply(data.series, annotation))
data.p = pData(data.series[[data.index]])
data.expr = exprs(data.series[[data.index]])
common = intersect(colnames(data.expr), rownames(data.p))
m1 = match(common, colnames(data.expr))
m2 = match(common, rownames(data.p))
data.expr = data.expr[, m1]
data.p = data.p[m2, ]
View(data.p)
# Get the expression data
expression_df <- read.csv(file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE), row.names = 1)
View(expression_df)
if (GSE == "GSE115650" || GSE == "GSE140261") {
title <- substr(data.p[,1], 4, 7)
columns <- colnames(expression_df) # use when processing raw counts
# columns <- colnames(expression_df)[3:length(colnames(expression_df))]
columns <- substr(columns, 5, 8)
} else if (GSE == "GSE56787"){
title <- data.p[,1]
title <- sapply(strsplit(title,"_"), `[`, 1) # split based on "_" and take the first element
columns <- colnames(expression_df)[3:length(colnames(expression_df))]
}
idx <- match(columns, title)
reordered_sample <- data.p[,2][idx]
reordered_sample
expression_df <- setNames(expression_df, reordered_sample)
# expression_df <- setNames(expression_df, c("Gene_Symbol", "Ensembl_Gene_ID", reordered_sample))
write.csv(
expression_df,
file = sprintf("data_GSM/%s_raw_counts.csv", GSE),
quote = F
)
GSE = "GSE56787"
## Read data and metadata into dataframe
data <-
read.csv(
file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE),
header = T,
row.names = 1
)
meta <- read.csv(file = sprintf("meta/%s_meta.csv", GSE),
header = T,
row.names = 1)
### Check classes of the data we just brought in
class(data)
class(meta)
View(data)
## Read data and metadata into dataframe
data <-
read.csv(
file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE),
header = T,
row.names = 1
)
meta <- read.csv(file = sprintf("meta/%s_meta.csv", GSE),
header = T,
row.names = 1)
### Check classes of the data we just brought in
class(data)
class(meta)
View(data)
View(meta)
### Check that sample names match in both files
all(colnames(data) %in% rownames(meta))
library(GEOquery)
## Download series data from GEO ##
GSE = "GSE56787"
data.series = getGEO(GEO = GSE,
AnnotGPL = FALSE,
getGPL = FALSE)
## Download platform data from GEO and get sample (phenotype) information ##
GPL = "GPL16791"
data.platform = getGEO(GPL)
data.index = match(GPL, sapply(data.series, annotation))
data.p = pData(data.series[[data.index]])
data.expr = exprs(data.series[[data.index]])
common = intersect(colnames(data.expr), rownames(data.p))
m1 = match(common, colnames(data.expr))
m2 = match(common, rownames(data.p))
data.expr = data.expr[, m1]
data.p = data.p[m2, ]
View(data.p)
# Get the expression data
expression_df <- read.csv(file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE), row.names = 1)
View(expression_df)
title <- data.p[,1]
title
columns <- colnames(expression_df)[3:length(colnames(expression_df))]
columns
idx <- match(columns, title)
idx
length(idx)
length(columns)
reordered_sample <- data.p[,2][idx]
expression_df <- setNames(expression_df, reordered_sample)
# Get the expression data
expression_df <- read.csv(file = sprintf("data/%s/%s_raw_counts.csv", GSE, GSE), row.names = 1)
View(expression_df)
if (GSE == "GSE115650" || GSE == "GSE140261") {
title <- substr(data.p[,1], 4, 7)
columns <- colnames(expression_df) # use when processing raw counts
# columns <- colnames(expression_df)[3:length(colnames(expression_df))]
columns <- substr(columns, 5, 8)
} else if (GSE == "GSE56787"){
# title <- data.p[,1]
# title <- sapply(strsplit(title,"_"), `[`, 1) # split based on "_" and take the first element
# columns <- colnames(expression_df)[3:length(colnames(expression_df))]
title <- data.p[,1]
columns <- colnames(expression_df)
}
idx <- match(columns, title)
reordered_sample <- data.p[,2][idx]
length(idx)
reordered_sample
idx
expression_df <- setNames(expression_df, reordered_sample)
# expression_df <- setNames(expression_df, c("Gene_Symbol", "Ensembl_Gene_ID", reordered_sample))
write.csv(
expression_df,
file = sprintf("data_GSM/%s_raw_counts.csv", GSE),
quote = F
)
library(BiocManager)
library(readr)
library(dplyr)
library(tibble)
## Read annotations
tx2gene <-
read.table(
"human_annotation.csv",
header = TRUE,
sep = ",",
colClasses = c("NULL", "character", "character") # read only gene symbol and gene_id
)
# Since multiple transcript correspond to one gene, eliminate genes that are not unique
tx2gene <- distinct(tx2gene)
View(tx2gene) # look at the annotation file
normalized_data <- read.csv(file = "tmp_expression.csv", header = T)
View(normalized_data)
## Match the gene names and add new column to dataframe
idx <- match(normalized_data[, 1], tx2gene[, 1])
reorder_symbol <- tx2gene[, 2][idx]
complete_df <- add_column(normalized_data, reorder_symbol, .before = 1)
names(complete_df)[1] <- "Gene_Symbol" # Change column names
names(complete_df)[2] <- "Ensembl_Gene_ID"
View(complete_df)
## If missing Gene_Symbol, replace with Ensembl_Gene_ID
for (i in 1:nrow(complete_df)) {
if (complete_df[i, 1] == "" || is.na(complete_df[i, 1])) {
complete_df[i, 1] <- complete_df[i, 2]
}
}
View(complete_df)
write.csv(complete_df, file = 'Heuvel_expression.csv', header=F)
write.csv(complete_df, file = 'Heuvel_expression.csv', row.names = F)
